@page "/"
@using RequestManager.API.Dto;
@using RequestManager.Api.Enums;
@using RequestManager.Core.Components

<h3>Start</h3>
@if (Requests == null)
{
	<p>Loading...</p>
}
else
{
	<MudTable @ref="_mudTable" T="RequestDto" Items="@Requests" Dense="true" Hover="true"
			  Filter="new Func<RequestDto, bool>(FilterFunc)" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
			  TotalItems="_totalItems"
			  ServerData="@(new Func<TableState, Task<TableData<RequestDto>>>(LoadPage))">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Request</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<RequestDto, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<RequestDto, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<RequestDto, object>(x=>x.CargoDescription)">Cargo description </MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<RequestDto, object>(x=>x.DeliveryDate)">Delivery date</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<RequestDto, object>(x=>x.DeliveryTime)">Dispatch date</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<RequestDto, object>(x=>x.DeliveryAddress)">Delivery address </MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<RequestDto, object>(x=>x.DispatchAddress)">Dispatch address</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<RequestDto, object>(x=>x.TelNumber)">Recipient's number </MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<RequestDto, object>(x=>x.RecipientFIO)">Recipient FIO </MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<RequestDto, object>(x=>x.Deliver.Name)">Deliver</MudTableSortLabel></MudTh>
			<MudIconButton Variant="Variant.Filled" OnClick="AddRecord" Icon="@Icons.Material.Outlined.Add"></MudIconButton>
		</HeaderContent>
		<RowTemplate >

			<MudTd DataLabel="Id"> @context.Id</MudTd>
			<MudTd Class=@GetRowCssClass(context.Status) DataLabel="Status">
				<MudSelect DisableUnderLine=@_isReadMode ReadOnly=@_isStatusReadMode @bind-Value="@context.Status" T="RequestStatus">
					<MudSelectItem Value="@context.Status">@context.Status</MudSelectItem>
					<MudSelectItem Value="@RequestStatus.Completed">@RequestStatus.Completed</MudSelectItem>
				</MudSelect>
			</MudTd>
			<MudTd DataLabel="Cargo description">
				<MudTextField DisableUnderLine=@_isReadMode ReadOnly=@_isReadMode @bind-Value="@context.CargoDescription" />
			</MudTd>
			<MudTd DataLabel="Delivery date">
				<MudDatePicker DisableUnderLine=@_isReadMode ReadOnly="@_isReadMode" AdornmentIcon="@(_isReadMode ? " " :Icons.Material.Filled.CalendarMonth)" @bind-Value="@context.DeliveryDate" Text="@context.DeliveryTime.ToString()" />
			</MudTd>
			<MudTd DataLabel="Dispatch date">
				<MudDatePicker DisableUnderLine=@_isReadMode ReadOnly=@_isReadMode AdornmentIcon="@(_isReadMode ? " " :Icons.Material.Filled.CalendarMonth)" @bind-Value="@context.DeliveryTime" Text="@context.DeliveryTime.ToString()" />
			</MudTd>
			<MudTd DataLabel="Delivery address">
				<MudTextField DisableUnderLine=@_isReadMode ReadOnly=@_isReadMode @bind-Value="@context.DeliveryAddress" />
			</MudTd>
			<MudTd DataLabel="Dispatch address">
				<MudTextField DisableUnderLine=@_isReadMode ReadOnly=@_isReadMode @bind-Value="@context.DispatchAddress" />
			</MudTd>
			<MudTd DataLabel="Recipient's number">
				<MudNumericField DisableUnderLine=@_isReadMode ReadOnly=@_isReadMode @bind-Value="@context.TelNumber" />
			</MudTd>
			<MudTd DataLabel="Recipient FIO">
				<MudTextField DisableUnderLine=@_isReadMode ReadOnly=@_isReadMode @bind-Value="@context.RecipientFIO" />
			</MudTd>
			<MudTd DataLabel="Deliver">
				<MudSelect DisableUnderLine=@_isReadMode ReadOnly=@_isReadMode @bind-Value="@context.Deliver" ToStringFunc="@(x => (x is not null ? x.Name : "нет курьера"))" T="DeliverDto">
					@foreach (var deliver in Delivers)
					{
						<MudSelectItem Value="@deliver">@deliver.Name</MudSelectItem>
					}
				</MudSelect>
			</MudTd>
			<MudTd>
				<MudIconButton Class="@(_isEdit && _editItemId == context.Id ? "visible-and-enabled" :  "hidden-and-disabled" )" OnClick="()=>ItemHasBeenCommitted(context)" Icon="@Icons.Material.Outlined.Check" />
				<MudIconButton Class="@(_isEdit && _editItemId == context.Id ? "visible-and-enabled" :  "hidden-and-disabled")" OnClick="()=>ResetItemToOriginalValues(context)" Icon="@Icons.Material.Filled.Cancel" />
				<MudIconButton Class="@((context.Status is RequestStatus.New or RequestStatus.InProgress && !_isEdit ? "visible-and-enabled" :  "hidden-and-disabled"))"
							   OnClick="() => EditRequest(context)" Size="@MudBlazor.Size.Small" Icon="@Icons.Material.Outlined.Edit" />
				<MudIconButton Class="@((context.Status is RequestStatus.New or RequestStatus.InProgress && !_isEdit ? "visible-and-enabled" :  "hidden-and-disabled"))"
							   OnClick="() => Drop(context)" Size="@MudBlazor.Size.Small" Icon="@Icons.Material.Outlined.Delete" />
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>
	<ReasonDialog></ReasonDialog>

}
<style>
	.hidden-and-disabled {
		display: none;
		pointer-events: none;
		opacity: 0.5;
	}

	.visible-and-enabled {
		display: block;
		pointer-events: auto;
		opacity: 1;
	}
	<style>
    .new-status {
        background-color: lightgrey; /* Серый фон для статуса "New" */
    }

    .rejected-status {
        background-color: indianred; /* Красный фон для статуса "Rejected" */
    }   
	.progres-status {
        background-color: orange; /* Красный фон для статуса "Rejected" */
    }	
	.complited-status {
        background-color: lightgreen; /* Красный фон для статуса "Rejected" */
    }
</style>

</style>